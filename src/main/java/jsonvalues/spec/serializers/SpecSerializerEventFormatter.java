package jsonvalues.spec.serializers;

import static jsonvalues.spec.AvroSpecFun.formatTime;

import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.function.Function;
import jdk.jfr.consumer.RecordedEvent;

/**
 * A function that takes the Java Flight Recorder (JFR) events generated by the Avro serializer and returns a
 * formatted string representation of the event. The formatted string includes the result, duration,
 * number of bytes, operation counter, and event start time.
 */
public final class SpecSerializerEventFormatter implements Function<RecordedEvent, String> {

  /**
   * The singleton instance of AvroSerializerEventFormatter.
   */
  public final static SpecSerializerEventFormatter INSTANCE = new SpecSerializerEventFormatter();

  SpecSerializerEventFormatter() {
  }

  @SuppressWarnings("InlineFormatString")
  private static final String FORMAT_SUC =
      "event:avro-serializer; result: %s; duration: %s; bytes: %s; counter: %s; start_time: %s";

  @SuppressWarnings("InlineFormatString")
  private static final String FORMAT_ERR =
      "event:avro-serializer; result: %s; exception: %s; duration: %s; bytes: %s; counter: %s; start_time: %s";

  static final String EVENT_NAME = "Avro_Serializer_Event";


  @Override
  public String apply(final RecordedEvent event) {
    assert EVENT_NAME.equals(event.getEventType()
                                  .getName());
    var result = event.getValue("result");
    boolean isSuccess = "SUCCESS".equals(result);
    return isSuccess ?
           String.format(FORMAT_SUC,
                         result,
                         formatTime(event.getDuration()
                                         .toNanos()),

                         event.getValue("bytes"),
                         event.getValue("counter"),
                         event.getStartTime()
                              .atZone(ZoneOffset.UTC)
                              .format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
                        ) :
           String.format(FORMAT_ERR,
                         result,
                         event.getValue("exception"),
                         formatTime(event.getDuration()
                                         .toNanos()),
                         event.getValue("bytes"),
                         event.getValue("counter"),
                         event.getStartTime()
                              .atZone(ZoneOffset.UTC)
                              .format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
                        );

  }
}
